(self.webpackChunkrescript_material_ui_documentation=self.webpackChunkrescript_material_ui_documentation||[]).push([[877],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5619:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o=["components"],l={title:"Union Values"},s={unversionedId:"project-structure/union-values",id:"project-structure/union-values",isDocsHomePage:!1,title:"Union Values",description:"Union differences",source:"@site/docs/project-structure/union-values.md",sourceDirName:"project-structure",slug:"/project-structure/union-values",permalink:"/docs/project-structure/union-values",version:"current",frontMatter:{title:"Union Values"},sidebar:"docs",previous:{title:"Modules",permalink:"/docs/project-structure/modules"},next:{title:"Any Type",permalink:"/docs/project-structure/any-type"}},u=[{value:"Union differences",id:"union-differences",children:[]},{value:"String only unions",id:"string-only-unions",children:[{value:"Rules for string only unions",id:"rules-for-string-only-unions",children:[]},{value:"Additional types",id:"additional-types",children:[]}]},{value:"Numeric unions",id:"numeric-unions",children:[{value:"Rules for numeric unions",id:"rules-for-numeric-unions",children:[]}]},{value:"Mixed unions",id:"mixed-unions",children:[{value:"Rules for mixed unions",id:"rules-for-mixed-unions",children:[]}]}],p={toc:u};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"union-differences"},"Union differences"),(0,a.kt)("p",null,"While is is great to have a consistent usage for passing union values as props,\nit can come at a conversion cost. This is why the current bindings make a\ndifference between 3 types of union values."),(0,a.kt)("h2",{id:"string-only-unions"},"String only unions"),(0,a.kt)("p",null,"Whenever a prop on a component consists of a selection of string only literals,\nthe generator will use the\n",(0,a.kt)("a",{parentName:"p",href:"https://reasonml.org/docs/reason-compiler/latest/function#constrain-arguments-better"},"[@bs.string]"),"\n(will become obsolete with ReScript eventually) directive directly on the prop.\nThis will ensure a direct application of the string without conversion cost."),(0,a.kt)("p",null,"String only unions therefore need to get passed as a polymorphic variant. This\nis an example of the prop ",(0,a.kt)("inlineCode",{parentName:"p"},"variant"),", taken from ",(0,a.kt)("inlineCode",{parentName:"p"},"MaterialUi_Accordion.re"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},'~variant: option<[\n  | @bs.as("elevation") #Elevation\n  | @bs.as("outlined") #Outlined\n>=?,\n')),(0,a.kt)("p",null,"You can use it like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},"<MaterialUi_Accordion variant=#Outlined />\n")),(0,a.kt)("h3",{id:"rules-for-string-only-unions"},"Rules for string only unions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Always ",(0,a.kt)("inlineCode",{parentName:"li"},"[@bs.string]")," in the external (you may ignore this if you're on\n",(0,a.kt)("inlineCode",{parentName:"li"},"ReScript"),")"),(0,a.kt)("li",{parentName:"ul"},"Always ",(0,a.kt)("strong",{parentName:"li"},"uppercased")," polymorphic variant of the original string value"),(0,a.kt)("li",{parentName:"ul"},"Invalid chars (like spaces) will be replaced by ",(0,a.kt)("inlineCode",{parentName:"li"},"_"))),(0,a.kt)("h3",{id:"additional-types"},"Additional types"),(0,a.kt)("p",null,"In case that you need to pass around the type of a string union prop, the\ngenerator creates a helper type for you in the module. To continue the example\nfrom earlier, the following helper type will be added to\n",(0,a.kt)("inlineCode",{parentName:"p"},"MaterialUi_Accordion.re"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},"type variant = [ | #Elevation | #Outlined];\n")),(0,a.kt)("h2",{id:"numeric-unions"},"Numeric unions"),(0,a.kt)("p",null,"Similar to the string only unions, a union consisting of only numbers will\nutilize the\n",(0,a.kt)("a",{parentName:"p",href:"https://reasonml.org/docs/reason-compiler/latest/function#constrain-arguments-better"},"[@bs.int]"),"\ndirective. Therefore, numerical unions will accept a form of polymorphic variant\nas well."),(0,a.kt)("p",null,"These don't happen often - currently the only place where this applies is in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"MaterialUi_Grid.re")," component."),(0,a.kt)("p",null,"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},"<MaterialUi_Grid spacing=#V2 />\n")),(0,a.kt)("h3",{id:"rules-for-numeric-unions"},"Rules for numeric unions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Always ",(0,a.kt)("inlineCode",{parentName:"li"},"@bs.string")," in the external (you may ignore this if you're on\n",(0,a.kt)("inlineCode",{parentName:"li"},"ReScript"),")"),(0,a.kt)("li",{parentName:"ul"},"Always ",(0,a.kt)("inlineCode",{parentName:"li"},"#V[NUM]")," format")),(0,a.kt)("h2",{id:"mixed-unions"},"Mixed unions"),(0,a.kt)("p",null,"Mixed unions make use of one of the newer features that bucklescript offers:\n",(0,a.kt)("a",{parentName:"p",href:"https://reasonml.org/blog/union-types-in-bucklescript"},"[unboxed]"),". The nice\nthing about unboxed is, that there is no conversion cost, just as with the above\nones. Some of the helper functions will leave a function in the generated js,\nthat just returns the one argument it gets passed. These can be stripped easily\nwith an optimization build step (e.g. with webpack)."),(0,a.kt)("p",null,"Whenever a prop value can be a literal of multiple types, this way of typing it\nis used. A module inside of the component is created, that is simply named after\nthe prop (",(0,a.kt)("strong",{parentName:"p"},"uppercased"),")."),(0,a.kt)("p",null,"Let's use the ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," prop of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Grid")," component as an example. We can\npass either a string, callback or element as the ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," prop. This will\ngenerate the following module inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"Grid")," component file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},"module Component: {\n  type t;\n  let string: string => t;\n  let callback: (unit => React.element) => t;\n  let element: React.element => t;\n} = {\n  @unboxed\n  type rec t =\n    | Any('a): t;\n  let string = (v: string) => Any(v);\n  let callback = (v: unit => React.element) => Any(v);\n  let element = (v: React.element) => Any(v);\n};\n")),(0,a.kt)("p",null,"You can use it in the following way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason"},'open MaterialUi;\n<div>\n  <Grid component=Grid.Component.string("div") />\n  <Grid component=Grid.Component.element(<div />) />\n</div>\n')),(0,a.kt)("h3",{id:"rules-for-mixed-unions"},"Rules for mixed unions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Always creates a module leveraging ",(0,a.kt)("inlineCode",{parentName:"li"},"@unboxed")," with the uppercased name of the\nprop"),(0,a.kt)("li",{parentName:"ul"},"Always fills that module with helper functions that are named after the type\nthey represent"),(0,a.kt)("li",{parentName:"ul"},"Literal values don't have helper functions, but are represented as let\nbindings"),(0,a.kt)("li",{parentName:"ul"},"Numeric literals are always prefixed with ",(0,a.kt)("inlineCode",{parentName:"li"},"_")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"Grid.Md._2"),")"),(0,a.kt)("li",{parentName:"ul"},"Boolean literals are always prefixed with ",(0,a.kt)("inlineCode",{parentName:"li"},"_")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"Grid.Md._false"),")"),(0,a.kt)("li",{parentName:"ul"},"String literals are always their lowercased self (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"Grid.Md.auto"),")")))}c.isMDXComponent=!0}}]);